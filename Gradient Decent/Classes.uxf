<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>880</x>
      <y>170</y>
      <w>300</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Mesh
--
unsigned int _numVert
double* _vert 
unsigned int _numFacet
unsigned int * _facet 
--
Mesh(const char *fileName)
print(const char *fileName)
updateFromGradient(Gradeint)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>790</x>
      <y>400</y>
      <w>550</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>DeviceMesh
--
unsigned int _numVert
double* _vert //(on the GPU)
unsigned int _numFacet
unsigned int * _facet //(on the GPU)
vector &lt;unsigned int, unsigned int&gt; *_vertToFacet
Gradient _grad
--
DeviceMesh(const char *fileName)
DeviceMesh(Mesh) // copies a mesh to the GPU

Mesh copyToHost() // copies a mesh from the GPU

updateFromGradient() //calls moveMesh kernal
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1010</x>
      <y>310</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>140</y>
      <w>540</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>GradientDecentOptimizer
--
const char* myFileName
Mesh myMesh
DeviceMesh GPUMesh
Gradient myGradient
--
GradientDecentOptimizer(const char * inputMesh)
optimize(bool useGPU)
gradDecentStep(Mesh)
gradDecentStep(DeviceMesh)
print()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>390</y>
      <w>570</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Gradient
--
double *_gradA
double *_gradV
double *_gradAProjected

bool _onGPU;
--
-- Mesh methods are CPU and for time comparison 
Gradient(Mesh) // uses CPU memory, sets _onGPU = false;
Gradient(DeviceMesh) // uses GPU memory sets _onGPU = true;

calculateGradA(Mesh)
calculateGradA(DeviceMesh) // calls calcA kernal
calculateGradV(Mesh)
calculateGradV(DeviceMesh) // calls calcV kernal
projectGradA(Mesh)
projectGradA(DeviceMesh)   // calls projectA Kernal

computeDecent()
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
